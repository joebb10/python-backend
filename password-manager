import tkinter as tk
from tkinter import messagebox, simpledialog, Entry, Label, Button, END
import json
import base64
from cryptography.fernet import Fernet
import bcrypt
import random
import string

# Encryption and Decryption Functions
def generate_key(master_password: str) -> bytes:
    return base64.urlsafe_b64encode(master_password.encode())

def encrypt_data(data: str, key: bytes) -> bytes:
    fernet = Fernet(key)
    return fernet.encrypt(data.encode())

def decrypt_data(encrypted_data: bytes, key: bytes) -> str:
    fernet = Fernet(key)
    return fernet.decrypt(encrypted_data).decode()

# Hashing Master Password
def hash_master_password(password: str) -> bytes:
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt())

def check_master_password(hashed_password: bytes, user_password: str) -> bool:
    return bcrypt.checkpw(user_password.encode(), hashed_password)

class PasswordManager:
    def __init__(self):
        # Master Password Prompt
        master_password = simpledialog.askstring("Password Manager", "Enter master password:", show='*')
        if master_password is None:
            exit()

        self.key = generate_key(master_password)
        self.hashed_master_password = hash_master_password(master_password)

        # UI Setup
        self.root = tk.Tk()
        self.root.geometry("400x400")
        self.root.title("Password Manager")

        Label(self.root, text="Website").grid(row=0, column=0, padx=10, pady=10)
        self.web = Entry(self.root, width=35)
        self.web.grid(row=0, column=1, padx=10, pady=10)

        Label(self.root, text="Email/Username").grid(row=1, column=0, padx=10, pady=10)
        self.email = Entry(self.root, width=35)
        self.email.grid(row=1, column=1, padx=10, pady=10)

        Label(self.root, text="Password").grid(row=2, column=0, padx=10, pady=10)
        self.password = Entry(self.root, width=35)
        self.password.grid(row=2, column=1, padx=10, pady=10)

        Button(self.root, text="Generate Password", command=self.password_generator).grid(row=3, column=0, padx=10, pady=10)
        Button(self.root, text="Save", command=self.save).grid(row=3, column=1, padx=10, pady=10)
        Button(self.root, text="Search", command=self.search).grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        self.root.mainloop()

    def save(self):
        website = self.web.get()
        email = self.email.get()
        password = self.password.get()

        if len(website) == 0 or len(email) == 0 or len(password) == 0:
            messagebox.showinfo(title="Oops", message="Please don't leave any fields empty!")
            return

        new_data = {
            website: {
                "email": email,
                "password": encrypt_data(password, self.key).decode()
            }
        }

        try:
            with open("passwords.json", "r") as data_file:
                data = json.load(data_file)
        except FileNotFoundError:
            data = {}

        data.update(new_data)

        with open("passwords.json", "w") as data_file:
            json.dump(data, data_file, indent=4)

        self.web.delete(0, END)
        self.email.delete(0, END)
        self.password.delete(0, END)
        messagebox.showinfo(title="Password Manager", message="Password Saved.")

    def password_generator(self):
        # Length of the password
        length = random.randint(12, 16)  # A good password length

        # Defining character sets
        lower = string.ascii_lowercase
        upper = string.ascii_uppercase
        digits = string.digits
        symbols = string.punctuation

        # Ensuring the password has at least one character of each type
        password = [
            random.choice(lower),
            random.choice(upper),
            random.choice(digits),
            random.choice(symbols)
        ]

        # Filling the rest of the password length with a mix of all character types
        password += random.choices(lower + upper + digits + symbols, k=length - 4)

        # Shuffling the resulting password list to avoid predictable patterns
        random.shuffle(password)

        # Converting the list to a string
        password = ''.join(password)

        # Displaying the password in the password entry field
        self.password.delete(0, END)
        self.password.insert(0, password)

    def search(self):
        website = self.web.get()

        if not website:
            messagebox.showinfo(title="Error", message="Please enter a website to search.")
            return

        try:
            with open("passwords.json", "r") as data_file:
                data = json.load(data_file)
        except FileNotFoundError:
            messagebox.showinfo(title="Error", message="No data file found.")
            return

        if website in data:
            email = data[website]["email"]
            encrypted_password = data[website]["password"].encode()
            password = decrypt_data(encrypted_password, self.key)
            messagebox.showinfo(title=website, message=f"Email: {email}\nPassword: {password}")
        else:
            messagebox.showinfo(title="Not Found", message="No details for the provided website.")

if __name__ == "__main__":
    PasswordManager()
