import re


def check_vulnerability(contract_code):
  # Check for the "unchecked-send" vulnerability
  pattern = r"call.value\((.+)\)"
  match = re.search(pattern, contract_code)
  if match:
    print("Vulnerability found: unchecked-send")
  else:
    print("No unchecked-send vulnerability found.")
  
  # Check for the "re-entrancy" vulnerability
  pattern = r"this.balance"
  match = re.search(pattern, contract_code)
  if match:
    print("Vulnerability found: re-entrancy")
  else:
    print("No re-entrancy vulnerability found.")
  
  # Check for the "integer-overflow" vulnerability
  pattern = r"(x.add|x.sub).(y.add|y.sub)"
  match = re.search(pattern, contract_code)
  if match:
    print("Vulnerability found: integer-overflow")
  else:
    print("No integer-overflow vulnerability found.")
  
  # Check for the "timestamp-dependence" vulnerability
  pattern = r"now"
  match = re.search(pattern, contract_code)
  if match:
    print("Vulnerability found: timestamp-dependence")
  else:
    print("No timestamp-dependence vulnerability found.")
  
  # Check for the "uninitialized-storage-pointer" vulnerability
  pattern = r"storage\[(.+)\] ="
  match = re.search(pattern, contract_code)
  if match:
    print("Vulnerability found: uninitialized-storage-pointer")
  else:
    print("No uninitialized-storage-pointer vulnerability found.")

  
  # Check for the "controlled delegatecall" vulnerability
  pattern = r"delegatecall\((.+)\)"
  match = re.search(pattern, contract_code)
  if match and "msg.sender" not in match.group(1):
    print("Vulnerability found: controlled delegatecall")
  else:
    print("No controlled delegatecall vulnerability found.") 

  # Check for the "fallback" vulnerability
  pattern = r"fallback\((.+)\)"
  match = re.search(pattern, contract_code)
  if match and "msg.sender" not in match.group(1):
    print("Vulnerability found: fallback")
  else:
    print("No fallback vulnerability found.")

   # Check for the "oracle" vulnerability
  pattern = r"oracle\((.+)\)"
  match = re.search(pattern, contract_code)
  if match and "msg.sender" not in match.group(1):
    print("Vulnerability found: oracle")
  else:
    print("No oracle vulnerability found.")  
     
       
# Test the function with a sample contract code
contract_code = """
  contract TestContract {
  function attack() public {
    // Vulnerable: re-entrancy
    if (this.balance < 1 ether) {
      attacker.send(1 ether);
    }
     function foo() public {
    // Vulnerable: fallout
    suici(msg.sender);
    delegatecall(address);
  }
  } 
  
}

"""
check_vulnerability(contract_code)

# Output: 
# "Vulnerability found: unchecked-send"
# "Vulnerability found: re-entrancy"
# "Vulnerability found: integer-overflow"
# "Vulnerability found: timestamp-dependence"
# "Vulnerability found: uninitialized
